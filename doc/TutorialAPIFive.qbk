[section VMs and the rule of five]

One of the basic things we originally wanted to do with lua VMs, besides just
serialize them, was show how to encapsulate them in an object with ['value-type]
C++ semantics. We saw that it's not trivial to implement the rule of five for
such objects, and as a result we didn't know how to e.g. put VMs in standard
containers.

There are several possible approaches to accomplish this with primer.

If we try to make API objects directly copyable and moveable, there are a number
of potential pitfalls depending on how the API features work and how the userdata
types work. For instance, lua userdata objects may hold smart pointers to C++ -- a naive
approach to implementing a copy constructor, may inadvertently break those links
in the copy, for instance, even if the implementation goes partially through eris.

Probably the most straightforward and best encapsulated way to accomplish the
goal is to avoid making API objects themselves copyable or moveable, but work
via the ['pimpl] idiom, and make the pimpl object copyable and moveable.
In this case, move can always be handled by a single pointer move in the pimpl,
and copy can always be done by full serialization and deserialization. And the
pimpl means that your application at large need not include primer or lua
headers. Here's an example.

[primer_tutorial_example_api_rule_of_five]

[endsect] 
