[section Visitable Structures]

The `visit_struct` library is a miniature reflection library.

It provides some macros that allow you to define an arbitrary C++ struct as a
"visitable structure". This means that you can apply any generic function object
to the pairs formed of its field names and values in sequential order.

Usually, you will declare all the members as visitable when you do this, but
you don't have to.

See [@https://github.com/cbeck88/visit_struct visit_struct docs] for more info.

[h3 Primer]

It is integrated with Primer in that Primer has a specialization of push and
read for such types, which you can load by including `<primer/visit_struct.hpp`.

When a visitable structure is `pushed`:

* Primer creates a table
* Primer pushes each visitable member using `primer::push` and sets it to be a 
  field of the table at index corresponding to the member name.

When a visitable structure is `read`:

* Primer checks that it is reading from a table on th lua stack.
* Primer attempts to default construct the structure.
* Primer reads from corresponding field names of the table, using `primer::read`
  to try to obtain appropriate C++ values. These are move-assigned into the members
  of the structure. If all visitable fields are read, the structure is returned,
  if not, an error is reported.

[h3 Hana and Fusion]

Note that, because `visit_struct` has compatibility headers for `boost::hana`
and `boost::fusion`, any "fusion adapted structure" or `hana::struct` may be
read or pushed in this manner as well.

[endsect]
