[section adapt]

`adapt` is a mechanism that takes user functions with a complex signature and
adapts them to be pushed to lua.

There are two things that `adapt` accomplishes:

* Generates boiler-plate code which reads parameters of given types off of the lua stack,
  and handles errors in reading them.
* Provides a way for the caller to terminate the function call without triggering `longjmp`
  and trashing objects on the stack without calling their destructors.
  (This is only an issue if lua is compiled as C.)

`adapt` handles the first one using `primer::read`. `adapt` handles the second
one using `primer::result`.

The core object of `adapt` is a class template:

[primer_adapt_decl]

When given a function pointer `f`, `adapt` is expected to provide a static member function of signature
`int (lua_State *)` which is named `adapted`.

Given a function pointer of the form,

``
  primer::result my_func(lua_State * L, std::string foo, bool bar, int baz);
``

`adapt` converts it to a function somewhat similar to the following:

``
  primer::result my_func_helper(lua_State * L) {
    auto arg1 = primer::read<std::string>(L, 1);
    if (!arg1) { return arg1.err(); }

    auto arg2 = primer::read<bool>(L, 2);
    if (!arg2) { return arg2.err(); }

    auto arg3 = primer::read<int>(L, 3);
    if (!arg3) { return arg3.err(); }

    return my_func(L, *arg1, *arg2, *arg3);
  }

  int my_func_adapted(lua_State * L) {
    if (auto r = my_func_helper(L)) {
      if (r->is_return_) {
        return r->n_;
      } else {
        return lua_yield(L, r->n_);
      }
    } else {
      lua_pushstring(L, r.err().str().c_str());
      return lua_error(L);
    }
  }
``

Each parameter is read from the stack in succession using `primer::read`. If any cannot
be read, then the input is invalid and an error is returned. If all can be read, then
the user function is invoked, and its result returned.

[note An important principle of `adapt` is that, it always gives you the stack as it found
  it from lua. `primer::read` is not supposed to have side-effects for the stack, and
  adapt is not supposed to clear the stack before your function is called.
  So, if for some reason you need to access the actual lua values that were the inputs,
  rather than their C++ versions, (as occasionally happens), you can easily do that.

  This is also important because lua values may be destroyed by the garbage collector once
  they are removed from the stack. For instance, if your callback takes a `const char *`
  parameter, or retrieves a reference to a userdata object, those pointers and references
  can become dangling if the stack is cleared and there are no other references to these
  objects. They are guaranteed to be valid at least as long as the values are on the stack.
]

`primer::result` is implemented by a simple `return` in the case of a return signal,
by calling `lua_yield` in case of a yield, and by raising a lua error in case of
an error. This part is quite trivial -- the only subtlety in the actual implementation
involves making sure that it works with no leaks, whether lua is compiled as C or C++.

[caution When using the adapt mechanism, if lua is compiled as C, the user function
      `my_func` must not trigger a lua error directly -- it must return objects of the
      form `primer::error` instead.

      If it does not, then a lua error triggers a call
      to `longjmp` which will toss any automatic objects on the stack without calling
      destructors. This will leak all of the input parameters, and technically causes
      undefined behavior according to the C++ standard. 

      A similar statement holds for calling `lua_yield(L, n)`. You should instead return
      `primer::yield(n)`.

      The `adapt` mechanism is very useful when lua is compiled as C -- it means that
      when writing callbacks in C++, you can easily raise errors or yield
      without leaking your local C++ variables, since they will always be destroyed
      when you return.]

The `PRIMER_ADAPT` macro is defined:
[primer_adapt]

so that `PRIMER_ADAPT` can be used to push complex functions directly to lua, e.g.:

```
  lua_pushcfunction(L, PRIMER_ADAPT(&my_func));
```

`primer::adapt` also has a trivial specialization for functions which are already `lua_CFunction`:

[primer_adapt_trivial]

[h2 Customization]

If you would like to implement a custom parameter reading / error handling mechanism, you can do that by introducing
a new return type for such functions, and specializing the `adapt` class template for function pointers with your
given return type.

Your functions using the new return type would then be automatically recognized also by `PRIMER_ADAPT_USERDATA`
and `USE_LUA_CALLBACK` in an `api::base` object.

[endsect]
