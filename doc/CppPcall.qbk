[section CppPcall]

Primer contains a handy utility called `cpp_pcall` which can be used to execute
any C++ call with any arguments inside of a lua protected context.

This is essentially an extension of the `cpcall` idiom described on the lua
mailing lists, except using template metaprogramming.

For reference, see [@http://lua-users.org/wiki/ErrorHandlingBetweenLuaAndCplusplus this description and example] of `lua_cpcall` usage.

    int operate(lua_State * L, std::string & s, int x, int y) {
        std::string msg = "Calling " + s + "\n";  // can raise exception; must be destroyed
        cout << msg;
        // caution: this code by raise exceptions but not longjump.
        struct C {
            static int call(lua_State * L) {
                // caution: this code may longjump but not raise exceptions.

                C * p = static_cast<C*>(lua_touserdata(L, 1));
                assert(lua_checkstack(L, 4));
                lua_getglobal("add"); // can longjump
                assert(lua_isfunction(L, -1));
                lua_pushstring(L, s); // can longjump
                lua_pushnumber(L, p->x);
                lua_pushnumber(L, p->y);
                lua_call(L, 3, 1);    // can longjump
                p->z = lua_tonumber(L, -1); assert(lua_isnumber(L, -1));
                return 0;
            }
            const char * s; int x; int y; int z;
        } p = {s.c_str(), x, y, 0};
        int res = lua_cpcall(L, C::call, &p); // never longjumps
        if (res != 0) {
            handle_error(L);  // do something with the error; can raise exception
            //note: we let handle_error do lua_pop(L, 1);
        }
        return p.z;
    }

In summary, the idea is to create a local `struct` that will hold pointers to
the call parameters, then do something with them in a lua callback, then, push
that callback and a pointer to the structure to pcall.

`cpp_pcall` accomplishes the same but without the boiler-plate.
In addition, `cpp_pcall` can work not only with a function pointer, but any
C++ function object or lambda function, which often makes this whole idiom
much nicer.

[cpp_pcall_synopsis]

A related function, `mem_pcall`, is used internally by the Primer to capture lua
memory errors as appropriate according to the value of `PRIMER_NO_MEMORY_FAILURE`.

[mem_pcall_implementation]

For instance, here's an example from the implementation of `bound_function`.
`protected_call` is a member function of bound function which is used to
implement all of its forwarding facing functions.

``
  // Calls the bound_function in a protected context. This is no fail.
  template <typename return_type, typename... Args>
  expected<return_type> protected_call(Args &&... args) const noexcept {
    expected<return_type> result{primer::error::cant_lock_vm()};
    if (lua_State * L = ref_.lock()) {
      if (auto stack_check = detail::check_stack_push_each<int, Args...>(L)) {
        auto ok = mem_pcall(L, [&]() {
          ref_.push(L);
          primer::push_each(L, std::forward<Args>(args)...);
          detail::fcn_call(result, L, sizeof...(args));
        });

        if (!ok) { result = std::move(ok.err()); }
      } else {
        result = std::move(stack_check.err());
      }
    }
    return result;
  }
``

In this code, the lambda contains code that could potentially cause a lua
memory failure, when pushing objects and also popping return values off of the
stack. `mem_pcall` allows us to catch all such errors, and when `PRIMER_NO_MEMORY_FAILURE`
is defined, the `mem_pcall` and the lambda are inlined, producing a direct call
with no overhead.

[h4 Implementation Details]

For the curious, `cpp_pcall`'s implementation looks like this:

[cpp_pcall_implementation]

[endsect]
