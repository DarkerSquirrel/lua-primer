[section lua_ref]

A `primer::lua_ref` is a reference to a lua value which exists in a lua VM.

It is a "weak pointer", in the sense that, obtaining the value from the reference may fail,
if for instance, the VM has already been destroyed.

[h2 Usage]

To bind a `lua_ref` to a lua value,

# Push the value onto the top of the stack.
# Construct a `lua_ref` from the pointer `lua_State *` for that stack.
This pops the object from the stack.

If the stack is empty, then the `lua_ref` is placed in the empty state.

It can be default constructed in the empty state as well.

If the lua VM is destroyed (closed), the `lua_ref` reverts to the empty
state the next time it tries to be accessed.

While the VM is not closed, the referred object will not be garbage
collected by lua.

The value can be obtained from the reference by using the `push` methods, or the `as` method.

[primer_example_ref]

[h2 Header]

[primer_lua_ref]

[note While `primer::lua_ref` is copyable, copying it is not that cheap as it has
 has to lock the VM, push the object, and create a new ref. ]

[h2 Safety and ownership]

`primer::lua_ref` is safe in the sense that it will fail to lock
in that case, rather than giving undefined behavior.

However, `primer::lua_ref` cannot take ownership of a lua VM, nor
is it thread-safe.

[caution You must not pass these objects across threads. Lua is generally not thread safe anyways, so this
should come as no surprise. ]

As long as the lua state is alive, it will not garbage collect an object referred to by `primer::lua_ref`.

This is
achieved using the `luaL_ref` mechanism, see lua docs.

[endsect]
