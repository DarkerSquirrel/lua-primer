[section API VFS]

`primer::api::vfs` helps to create a custom filesystem exposed to lua.

[h4 Overview]

`lua` provides some core functionality to allow scripts to load modules from the
filesystem, through three functions `loadfile`, `dofile`, and `require`.
These aren't part of the `package` module, they are part of the base library,
and the package search path is something that can be configured during the process
of installing lua.

In an embedded lua application, it's likely that you'll want to sandbox this and
prevent lua from directly accessing and loading things from the filesystem.

`primer::api::vfs` helps to simplify this. Instead of implementing three very
similar functions, to use `primer::api::vfs`, you only implement one of them.
You do this by creating a class satisfying the "VFS Provider" concept.

Then, you make your class derive from the `primer::api::vfs` class template using
the CRTP style. This basically performs "dependency-injection", so that the generic
implementations of `dofile`, `loadfile`, and `require` can access your `load`
function and do the right thing, and brings in the boiler-plate which makes it
a proper API feature. `primer::api::vfs` has no data members and no nontrivial
intialization, but your "VFS Provider" might.

[h4 Concept: VFS Provider]

A VFS Provider is expected to provide a member function `load`:

``
  expected<void> load(lua_State *, const std::string & path);
``

which attempts to load the module corresponding to `path` onto the stack, using
e.g. `luaL_loadbuffer`. It should then return "ok", i.e., no error. If it cannot,
it should instead return an error message. For instance you might use the pre-formatted
message `primer::error::module_not_found`.

[h4 Example Usage]

[primer_vfs_example]

[h4 Synopsis]

Once you have a VFS provider, you make it derive from `primer::api::vfs` using CRTP like so:

```
  struct my_vfs_provider : primer::api::vfs<my_vfs_provider> {
    ...
  };
```

Your object will then inherit appropriate implementations of API Feature methods, so that
it effectively implements a little library consisting of `loadfile`, `dofile`, and `require`.
The implementations of these work by calling your `load` method as appropriate.

You can then declare it in your API object using API_FEATURE as usual, e.g.:

```
  API_FEATURE(my_vfs_provider, vfs_);
```

[endsect]
