[section Optionals]

Primer includes some support for ['optional] containers.

An optional is a container which contains either one or zero of a given type.
A popular example is `boost::optional` -- a `std::optional` type was recently
added to C++17.

Optionals are extremely useful for representing optional parameters to a
function. In primer, this gives you a flexible way to allow users of your
callbacks to omit certain arguments.

[h4 Pushing optionals]

Pushing optionals is straightforward in primer. If the optional is empty,
then primer will push `nil`. If it is occupied, then primer pushes the value.

[primer_example_optional_push]

[h4 Reading optionals]

Optionals can usefully have at least two different kinds of semantics when reading: ['strict] and ['relaxed].

When strictly reading optionals, only values that would round-trip with "push" are accepted,
and anything that isn't nil or acceptable as an instance of the value type, is an error.

[primer_example_optional_read]

The main use of course is as function parameters. Given a function taking optional parameters like so,

[primer_example_maximum_function_defn]

these are the kinds of semantics that primer would give when it is pushed to lua:

[primer_example_maximum_function_test]


[h4 Relaxed semantics]

In the ['relaxed] semantics, we simply try to read an instance of the value type. If it succeeds,
then that becomes the value of the optional. If an error results, then the optional is returned
in the empty state, and the error is discarded.

This can be useful, for instance, if you have a complex function which takes inputs using a
named parameter idiom, and you want it to flexibly ignore values that don't make sense.
Possibly, the intention is that the user will pass some table that also has other uses within
your system, and if every possible field must match exactly then the interface would be too brittle
to be used comfortably.

[h4 Configuring]

To give a type optional semantics, we simply specialize push and read for it.
The built-in semantics are implemented in a header

`#include <primer/container/optional_base.hpp>`

They can be enabled for an optional type, for example, as follows:

[primer_example_boost_optional_decl]

If we had selected `detail::optional_relaxed_read` instead of `detail::optional_strict_read`, then we would get relaxed semantics.

[h4 Optional Access]

If you have an optional type which differs significantly from `boost::optional` and `std::optional` in its interface,
then in order to use the above traits implementing the strict and relaxed read, you must specialize an additional trait
`primer::traits::optional_access` for your type, in order to tell primer how to talk to it.

[primer_optional_access]

[endsect]
