[#lua_ref_reference]
[section:lua_ref class lua_ref]

A `primer::lua_ref` is a reference to a lua value which exists in a lua VM.

More precisely, it is an RAII object which manages a *lua reference* created by `luaL_ref` and cleaned up by `luaL_unref` (see [@http://www.lua.org/manual/5.3/manual.html#luaL_ref documentation]).

`primer::lua_ref` doesn't have the semantics of a C++ reference. It has an empty state, and can be assigned and reassigned to point to different objects.
Effectively, it's more like a smart pointer which points to some lua value.

[h4 Basic Usage]

To bind a `lua_ref` to a lua value,

# Push the value onto the top of the stack.
# Construct a `lua_ref` from the pointer `lua_State *` for that stack.
This pops the object from the stack.

If the stack is empty, then the `lua_ref` is placed in the empty state.

It can be default constructed in the empty state as well.

The value can be obtained from the reference by using the `push` methods, or the `as` method. The `as` method
will first push the value to the stack, then try to `primer::read` it, then clean up the stack.

If the lua VM is destroyed (closed), the `lua_ref` reverts to the empty
state.

[primer_example_ref]

[h4 Synopsis]

There are two components to the `lua_ref` object:

* An `int` which is the index returned by `luaL_ref`.
* A reference-counted weak pointer to a `lua_State`. This lets the `lua_ref` determine if the state has been closed. This is basically an implementation detail.

[primer_lua_ref]

[h4 Safety and ownership]

* A `primer::lua_ref` object corresponds to the lua reference created by `luaL_ref` somewhere in the registry. lua guarantees that the referenced object won't be garbage collected
  as long as this reference exists. So, if the `lua_ref` is engaged and the VM still exists, locking the state and pushing the object are both `noexcept`, no-fail operations. They can't cause lua memory allocation failure either.
* `primer::lua_ref` *cannot take ownership of the lua VM*. If `lua_close` is called, the object will be collected, and attempts to lock the `lua_ref` after that will yield `nullptr`. The `operator bool` test will also yield false. Effectively, once the VM is closed, any outstanding `lua_ref` objects revert to the empty state.
* Binding a `lua_ref` to an object on the stack ['can] cause a lua memory allocation failure, but not `std::bad_alloc`.
* `primer::lua_ref` is safe in the sense of not becoming a dangling pointer in any scenario. However, it is not thread-safe, you should not pass this across threads.

[caution Copying a `lua_ref` is expensive relative to most other small objects
and usually something that you want to avoid, since it involves interacting with
the lua VM.

When running without
`PRIMER_NO_MEMORY_FAILURE`, it further requires a protected context to catch
a lua memory allocation failure.

In low memory scenarios, this should likely be avoided.
For instance, a `shared_ptr<lua_ref>` is just as useful as a `lua_ref` and
can be copied without making new dynamic allocations. If you are trying to improve
performance you might consider profiling something like that in your application.

In general prefer to move these whenever possible.]

[caution You must not pass these objects across operating-system threads. Lua is
generally not thread-safe anyways, so this should come as no surprise. ]

[h4 Read / Push semantics]

Using `primer::push` with a `primer::lua_ref` calls the thread-push member function,
and so comes with all the caveats above -- if you push it to an unrelated lua VM,
it won't work and bad things will happen.

Using `primer::read` with a `primer::lua_ref` *always* succeeds in binding to a value
at the given position, unless it is nil or out of bounds, in which case it produces
a `lua_ref` in the empty state.

This makes it effectively an "any" type for purposes of function parameters,
and you can use `lua_ref::as` to easily try to interpret it as other values later. So it
can be used sort of as a poor man's variant.

Here's an example function to illustrate:

[primer_example_ref_read_func]

And example semantics:

[primer_example_ref_read_test]

Note that, it is not too difficult to implement your own `read` and `push`
specializations for a proper variant type that appears in your program.
We don't currently have a ['generic] `boost::variant` header in Primer, so you
would have to make your own.

[endsect]
