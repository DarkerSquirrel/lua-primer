[section Expected]

`primer::expected` is our primary error handling mechanism.

It is broadly similar in motivation, design, and implementation to the `std::expected`
type which was proposed for the C++17 standard.

It is a template class implementing a discriminated union. `expected<T>` contains either a value
of type `T`, or a `primer::error`.

[primer_bad_access]
[primer_expected]

[h3 Specialization: references]

`primer::expected<T&>` is specialized, since unions cannot contain references.

Instead, `primer::expected<T&>` is implemented as a wrapper over `expected<T*>`.

It is copyable and moveable, and can be reassigned like a pointer. However, when it is dereferenced, it always returns `T&`, even if the `expected<T&>` is const.

[primer_expected_ref]

[h3 Specialization: void]

`primer::expected<void>` is specialized, in order to represent "successful completion of an operation, or an error".

`expected<void>` mostly has a similar interface to the others, in that `operator bool` returns `false` in the
presence of an error. However, `expected<void>` has no `operator *` and is not implicitly convertible to other
kinds of `expected`.

It is default constructed in the "no error" state, unlike the others.

[primer_expected_void]

[endsect]
