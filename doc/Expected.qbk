[section expected]

`primer::expected` is our primary error handling mechanism.

It is broadly similar in motivation, design, and implementation to the `std::expected`
type which was proposed for the C++17 standard. [footnote See also [@https://channel9.msdn.com/Shows/Going+Deep/C-and-Beyond-2012-Andrei-Alexandrescu-Systematic-Error-Handling-in-C a talk] by Andrei Alexandrescu]

`primer::expected<T>` is a container which holds either a value of type `T`, or
a `primer::error`.

Given a value `expected<T> e`, the `operator bool` of `e` tests whether it has a value or an error.
`true` indicates a value, `false` indicates an error.

The value is accessed by reference using `operator *`.

The error is accessed by reference using member function `err()`.

Both kinds of access are ['unchecked], you get undefined behavior if you use
`operator *` when there actually is an error.

[h4 Example]

[primer_expected_example]

[h4 Synopsis]

[primer_expected]

[h4 Specialization: references]

`primer::expected<T&>` is specialized, since unions cannot contain references.

[primer_expected_ref]

[h4 Specialization: void]

`primer::expected<void>` is specialized, in order to represent "successful completion of an operation, or an error".

`expected<void>` mostly has a similar interface to the others, in that `operator bool` returns `false` in the
presence of an error. However, `expected<void>` has no `operator *` and is not implicitly convertible to other
kinds of `expected`.

[primer_expected_void]

[endsect]
