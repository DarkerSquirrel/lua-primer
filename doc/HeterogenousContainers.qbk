[section Heterogenous Containers]

Primer has support for reading and pushing hetergenous containers which use
strings as their keys.

This can be used to easily implement a "named parameter" idiom in your
callback functions, or for many other uses.

The primary form of support for this is a compatibility header between Primer
and a small library called [@https://github.com/cbeck88/visit_struct visit_struct],
which is distributed with Primer.

`visit_struct` provides a way of attaching metadata to a class-type, by way of
a type trait, such that arbitrary visitors may be applied to instances of it.

Any structure which has been so declared "visitable", may be read or written to
lua as a table, in which the keys correspond to the names of the struct members,
and the values are determined using `primer::read` and `primer::push`.

In other words, the `struct` definition becomes like a schema for a table
layout.

The use of this can be seen with an example:

[*lua:]
[/ lua]

``
  h{ name = 'Charlie', id = 44 }
``

[*C++:]
[c++]

``
  struct h_arguments {
    std::string name;
    int id;
    boost::optional<int> group;
    boost::optional<std::string> task;
  };

  VISITABLE_STRUCTURE(h_arguments, name, id, group, task);

  primer::result h(lua_State * L, h_arguments args) {
    auto it = database.find(args.id);
    ...
  }
``

[h3 Usage]

There are two methods of making a struct visitable:

* The `VISITABLE_STRUCTURE` macro takes the name of a structure, possibly qualfiied by namespaces,
  as its first argument. Then, it takes the names of the fields which should be visitable.

* The three macros `BEGIN_VISITABLES`, `VISITABLE`, `END_VISITABLES` can be used ['inline] in a
  structure definition, to declare it visitable at the same time that it is defined.

See [@https://github.com/cbeck88/visit_struct documentation] for `visit_struct` for extended examples.
These declarations are useful for purposes outside of primer as well.

[h3 includes]

Within primer, the support for such structures is pulled in by including

`#include <primer/traits/push_visitable.hpp>`

and

`#include <primer/traits/read_visitable.hpp>` .

You can pull in these headers and the `visit_struct` headers using `#include <primer/visit_struct.hpp>`.

[endsect]
