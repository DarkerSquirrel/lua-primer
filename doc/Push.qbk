[section push]

`primer::push` is a template function used to push a C++ value to a lua Stack.

[primer_push]

In the case of primitive values, it is always a direct call to the corresponding
`lua_pushX` function.

In the case of containers, it generally resolves to the
creation of a table, with recursive calls to `push`, to push the elements and
populate the table.

* `push` is not permitted to fail, except in the case of lua memory allocation
failure. In this case, it raises a lua error.

* `push` always pushes exactly one object onto the stack.

`primer::push_each` is an extension which pushes a sequence of objects.

``
  primer::push_each(L, a, b, c);
``

is equivalent to

``
  primer::push(L, a);
  primer::push(L, b);
  primer::push(L, c);
``

[/ primer_push_each]

[h3 Supported Types]

The following core types are supported:

[table
  [[Type] [`primer::push`]]
  [[`bool`]                [ Calls `lua_pushboolean`. ]]
  [[`int`]                 [ Calls `lua_pushinteger`. ]]
  [[`long`]                []]
  [[`long long`]           []]
  [[`unsigned int`]        [ Calls `lua_pushinteger`. ]]
  [[`unsigned long`]       []]
  [[`unsigned long long`]  []]
  [[`float`]               [ Calls `lua_pushnumber`. ]]
  [[`double`]              []]
  [[`long double`]         []]
  [[`const char *`]        [ Calls `lua_pushstring`. ]]
  [[`std::string`]         []]
]

[caution When pushing a signed integral type, integer overflow is not permitted to
      occur, and primer will not perform overflow checks.

      ['If a push operation
      requires a narrowing conversion of a signed integer type to `LUA_INTEGER`,
      a `static_assert` will fail, to prevent overflow.]]

[caution When pushing a floating point type, Primer will not check for overflow or
      loss of precision.

      ['If a push operation requires a narrowing conversion of a floating point
      type to `LUA_NUMBER`,
      a `static_assert` will fail, to prevent overflow.]]

[note When pushing an unsigned integral type which is larger than `LUA_INTEGER`,
      primer will implicitly narrow it to the unsigned version of `LUA_INTEGER`,
      then perform a portable conversion from that type to `LUA_INTEGER`.

      This behavior is well-defined by the standard, but for your code to be
      portable in the sense of giving similar results on different machines where
      lua may be configured to use 32-bit or 64-bit integers,
      you must avoid such narrowing conversions.]

[note If you want your program to be portable no matter how lua is compiled, consider:

      - Only pushing 32 bit types, e.g., `int`, `unsigned int`, `float` on most
        platforms.

      - Using `LUA_INTEGER` and the unsigned version of that in your code, and
        only push these.

      If you just want to compile and don't care about overflow, you can do so
      with expressions like

      ``
        primer::push(L, static_cast<LUA_INTEGER>(i));
      ``

      Or, install custom handling for integer types like `long` and `long long`, see below.
      ]


The following ancillary types are supported (see `primer::read` docs for more info).

[table
  [[Type] [`primer::push`]]
  [[`primer::nil_t`]   [ Calls `lua_pushnil`. ]]
  [[`primer::truthy`]  [ Calls `lua_pushboolean`. ]]
  [[`primer::stringy`] [ Calls `lua_pushstring`. ]]
]


Primer includes additional headers to support some C++ standard containers and
and boost containers, which are pushed as tables. See the containers section for
details.

* `std::vector`
* `std::array`
* `std::set`
* `std::map`
* `std::unordered_map`
* `boost::flat_set`

[h3 Customization]

`primer::push` is defined in terms of a type trait, `primer::traits::push`.

[primer_push_impl]

The trait can be specialized to override primer's behavior
for certain types, or to add new behavior for custom types.

[primer_example_vec2i_defn]
[primer_example_vec2i_push_trait]
[primer_example_vec2i_push_test]

[h3 Stack Space]

One aspect of lua that you may easily miss on your first pass through the manual
is [@http://www.lua.org/manual/5.3/manual.html#4.2 the note about stack overflow].

The lua stack is dynamically sized. When a lua state is created, it is
relatively small. It can grow to a quite large size (thousands of elements).

Some of the more complex lua calls, like `lua_pcall`, will manage the checking
of stack bounds and ensure that they have enough space.

Most of the primitive lua calls, for efficiency, do not do any such bounds
checking.

The function `lua_checkstack(lua_State *, int)` ensures that the stack has
a given amount of extra spaces, and enlarges it if needed.
(`lua_checkstack` can conceivably fail, if lua runs out of memory.)

['lua leaves it up to you to manage this] -- if you don't manage it, simple
programs will work (because of a small built-in minimum space) but large
programs will give undefined behavior.

[h4 In Primer]

Most `primer::push` operations are primitive operations and we don't really want
to call `lua_checkstack` for each one. It's more economical to gather such checks
into large groups, so that the checks are performed before a large operation.

So, a custom push specialization has two options -- it can call `lua_checkstack`
itself, or it can ['assume] that the caller will do it. To tell the caller how
much space it needs, it ['must] declare the amount using

``
static constexpr int stack_space_needed = ...
``

More complex operations in Primer use this information to calculate at
compile-time how much stack space they need. For instance, Primer computes
how much space is needed to push `std::map<std::string, int>` based on it
knowledge of how much space is needed for `std::string`, and `int`. When a
`primer::bound_function` is called, it computes at compile-time how much stack
space it needs to push all of the arguments and calls `lua_checkstack` to make
sure it has enough space.

The space needed for any individual type can be obtained as a `constexpr` using

[primer_stack_space_for_push]

You can use such functions to get the correct `lua_checkstack` values into your
program without hard-coding them -- invariably such values tend to become
inaccurate after a refactor at a later date.

[note `stack_space_needed` should be at least one,
since you are pushing *something*.

If your type is complex enough that no fixed estimate of the stack space is
possible, then you should simply define it to be one, and your implementation
['must] call `lua_checkstack` manually to ensure correct behavior.]

[endsect]
