[section bound_function]

`primer::bound_function` is a `primer::lua_ref` which is known to point to an object of function type.

`bound_function`
provides several handy methods for calling the function, passing arbitrary numbers of C++ types, and obtaining the result
as a `primer::lua_ref`. These objects are pushed onto the lua stack using `primer::push`, then the bound function is invoked
using pcall. Any errors are returned to the caller -- the lua stack is always unchanged by this operation at the end.

`primer::bound_function` can be used to create C++ function objects referring to a function implemented in lua. 

These objects are *safe* -- calling them does not raise exceptions, and they handle
any lua errors and return them as `primer::error` objects, even if the user
function errs or the lua VM is destroyed. Furthermore, they carry out an
appropriate call to `lua_checkstack` no matter what parameters they are passed
for the call.

[note Like `lua_ref`, these objects are not thread-safe.]

`primer::bound_function` can also be used to create a `primer::coroutine`.

[h4 Synopsis]

[primer_bound_function]

[h4 Read / Push semantics]

Similar to `lua_ref`, these can be pushed onto the stack by `primer::push`.

On read, the nil value is read as putting the `bound_function` into the empty
state. Otherwise, if it's a function, it is bound, and anything else causes an
error.

[endsect]
