project : default-build <optimization>off debug <cxxflags>"-std=c++11" ;
# project : default-build <optimization>speed release <cxxflags>"-std=c++11" ;

INSTALL_LOC = <location>stage/ ;

### Boost directory

import os ;

local BOOST_ROOT = [ os.environ BOOST_ROOT ] ;
if $(BOOST_ROOT) {
  # echo "BOOST_ROOT = '" $(BOOST_ROOT) "'" ;
  BOOST_INCLUDE_DIR = $(BOOST_ROOT) ;
} else {
  echo "BOOST_ROOT variable not set!" ;
  BOOST_INCLUDE_DIR = "/usr/include" ;
}

# Try to find boost/version.hpp

if [ GLOB $(BOOST_INCLUDE_DIR)/boost/ : version.hpp ] {
  echo "Using BOOST_INCLUDE_DIR = '" $(BOOST_INCLUDE_DIR) "'" ;  
} else {
  echo "Could not find boost, skipping boost tests" ;
  BOOST_INCLUDE_DIR = ;
}

### Lua directory

local LUA_ROOT = [ os.environ LUA_ROOT ] ;
if ! $(LUA_ROOT) {
  LUA_ROOT = eris-master-lua5.3 ;
}

if [ GLOB $(LUA_ROOT)/src/ : lua.h ] {
  echo "Using LUA_ROOT = '" $(LUA_ROOT) "'" ;
  LUA_PATH = $(LUA_ROOT)/src ;
} else {
  error "Could not find lua!" ;
}

HAVE_ERIS = ;
if [ GLOB $(LUA_PATH)/ : eris.h ] {
  echo "Found eris headers" ;
  HAVE_ERIS = true ;
} else {
  echo "Could not find eris, skipping eris tests" ;
}

### Interpret flags

import modules ;

LUA_PRIVATE_FLAGS = <link>static <cxxflags>"-fpermissive -w" ;
LUA_SHARED_FLAGS = <include>$(LUA_PATH)/ ;

PRIMER_FLAGS = ;

if "--with-lua-32bit" in [ modules.peek : ARGV ] {
  LUA_SHARED_FLAGS += <define>LUA_32BITS ;
}

if "--no-static-asserts" in [ modules.peek : ARGV ] {
  PRIMER_FLAGS += <define>PRIMER_NO_STATIC_ASSERTS ;
}

if "--with-lua-as-cpp" in [ modules.peek : ARGV ] {
  LUA_PRIVATE_FLAGS += <cflags>"-x c++" ;
  PRIMER_FLAGS += <define>PRIMER_LUA_AS_CPP ;
  if $(HAVE_ERIS) {
    # work around some warnings in eris
    LUA_PRIVATE_FLAGS += <cflags>"-fpermissive -w" ;
  }
}

### Setup primer target

alias primer : : : : <include>../include/ <variant>debug:<define>PRIMER_DEBUG $(PRIMER_FLAGS) ;

### Setup test harness

alias test_harness : : : : <include>include/ ;

### Build lua

lib lualib : [ glob $(LUA_PATH)/*.c : $(LUA_PATH)/lua.c $(LUA_PATH)/luac.c ] : $(LUA_PRIVATE_FLAGS) $(LUA_SHARED_FLAGS) : : $(LUA_SHARED_FLAGS) ;
exe lua : $(LUA_PATH)/lua.c lualib : $(LUA_PRIVATE_FLAGS) ;


install install-lua-bin : lua : <location>stage/ ;

### Build primer

STRICT = <cxxflags>"-Wall -Werror -Wextra -pedantic " ;

exe core : core.cpp lualib primer test_harness : $(STRICT) ;
exe visitable : visitable.cpp lualib primer test_harness : $(STRICT) ;
exe std : std.cpp lualib primer test_harness : $(STRICT) ;
exe noexcept : noexcept.cpp lualib primer test_harness : <define>PRIMER_NO_EXCEPTIONS <cxxflags>"-fno-exceptions -fno-rtti" $(STRICT) ;

install install-bin : core visitable std noexcept : $(INSTALL_LOC) ;

# Persistence tests...
if $(HAVE_ERIS) {
  exe api : api.cpp lualib primer test_harness : $(STRICT) ;

  install install-api-bin : api : $(INSTALL_LOC) ;

  # Eris internal tests
  exe persist : $(LUA_ROOT)/test/persist.c lualib : $(LUA_PRIVATE_FLAGS) ;
  exe unpersist : $(LUA_ROOT)/test/unpersist.c lualib : $(LUA_PRIVATE_FLAGS) ;

  install install-eris-test-bin : persist unpersist : $(INSTALL_LOC) ;

  install install-persist-lua : $(LUA_ROOT)/test/persist.lua : $(INSTALL_LOC) ;
  install install-unpersist-lua : $(LUA_ROOT)/test/unpersist.lua : $(INSTALL_LOC) ;
}


# Boost tests

if $(BOOST_INCLUDE_DIR) {

  alias boost_headers : : : : <include>$(BOOST_INCLUDE_DIR) ;

  exe boost : boost.cpp lualib primer test_harness boost_headers : $(STRICT) ;

  install install-boost-bin : boost : $(INSTALL_LOC) ;
}
