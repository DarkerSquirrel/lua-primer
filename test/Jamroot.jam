project : default-build <optimization>off debug <cxxflags>"-std=c++11 -Wall -Werror -Wextra -pedantic" ;
# project : default-build <optimization>speed release <cxxflags>"-std=c++11" ;

INSTALL_LOC = <location>stage/ ;

### Boost directory

import os ;

local BOOST_ROOT = [ os.environ BOOST_ROOT ] ;
if $(BOOST_ROOT) {
  # echo "BOOST_ROOT = '" $(BOOST_ROOT) "'" ;
  BOOST_INCLUDE_DIR = $(BOOST_ROOT) ;
} else {
  echo "BOOST_ROOT variable not set!" ;
  BOOST_INCLUDE_DIR = "/usr/include" ;
}

# Try to find boost/version.hpp

if [ GLOB $(BOOST_INCLUDE_DIR)/boost/ : version.hpp ] {
  echo "Using BOOST_INCLUDE_DIR = '" $(BOOST_INCLUDE_DIR) "'" ;  
} else {
  echo "Could not find boost, skipping boost tests" ;
  BOOST_INCLUDE_DIR = ;
}

### Lua directory

local LUA_ROOT = [ os.environ LUA_ROOT ] ;
if ! $(LUA_ROOT) {
  LUA_ROOT = eris-master-lua5.3 ;
}

if [ GLOB $(LUA_ROOT)/src/ : lua.h ] {
  echo "Using LUA_ROOT = '" $(LUA_ROOT) "'" ;
  LUA_PATH = $(LUA_ROOT)/src ;
} else {
  error "Could not find lua!" ;
}

HAVE_ERIS = ;
if [ GLOB $(LUA_PATH)/ : eris.h ] {
  echo "Found eris headers" ;
  HAVE_ERIS = true ;
} else {
  echo "Could not find eris, skipping eris tests" ;
}

### Interpret flags

import modules ;

if "--with-lua-32bit" in [ modules.peek : ARGV ] {
  LUA_DEFINE = <define>LUA_32BITS ;
} else {
  LUA_DEFINE = ;
}

NO_STATIC_ASSERTS = ;
if "--no-static-asserts" in [ modules.peek : ARGV ] {
  PRIMER = <include>../include/ <define>PRIMER_DEBUG <define>PRIMER_NO_STATIC_ASSERTS ;
} else {
  PRIMER = <include>../include/ <define>PRIMER_DEBUG ;
}

### Build lua

ALL_LUA_FLAGS = <include>$(LUA_PATH)/  $(LUA_DEFINE) ;

lib lualib : [ glob $(LUA_PATH)/*.c : $(LUA_PATH)/lua.c $(LUA_PATH)/luac.c ] : <link>static $(ALL_LUA_FLAGS) : : $(ALL_LUA_FLAGS) ;
exe lua : $(LUA_PATH)/lua.c lualib : ;

install install-lua-bin : lua : <location>stage/ ;

### Build primer

TEST_HARNESS = <include>include/ ;

FLAGS = $(TEST_HARNESS) $(PRIMER) ;

echo "flags = " $(FLAGS) ;

exe core : core.cpp lualib : $(FLAGS) ;
exe visitable : visitable.cpp lualib : $(FLAGS) ;
exe std : std.cpp lualib : $(FLAGS) ;

install install-bin : core visitable std : $(INSTALL_LOC) ;

# Persistence tests...

if $(HAVE_ERIS) {
  exe persist : persist.cpp lualib : $(FLAGS) ;

  install install-persist-bin : persist : $(INSTALL_LOC) ;
}


# Boost tests

if $(BOOST_INCLUDE_DIR) {

  BOOST = <include>$(BOOST_INCLUDE_DIR) ;
  FLAGS = $(TEST_HARNESS) $(BOOST) $(PRIMER) ;

  exe boost : boost.cpp lualib : $(FLAGS) ;

  install install-boost-bin : boost : $(INSTALL_LOC) ;
}
